<div class="card w-100">
    <div class="card-header">
        Add new Entry
    </div>
    <div class="card-body">
        @if (Cars != null && Cars.Any())
        {
            <EditForm Model=@RefuelEntry OnValidSubmit=@FormSubmitted>
                <FluentValidationValidator ValidatorType=typeof(RefuelEntryValidator) />

                @if (LicensePlate == null)
                {
                    <div class="form-group">
                        <label for="formGroupCar">Car</label>
                        <InputSelect ValueChanged="(string carId) => UpdateCarId(carId)" ValueExpression="() => RefuelEntry.CarIdAsString" 
                                     Value="RefuelEntry.CarIdAsString" class="form-control" id="formGroupCar">
                            @if (Cars != null)
                            {
                                @foreach (var car in Cars)
                                {
                                    <option value="@car.Id.ToString()">@car.LicensePlate</option>
                                }
                            }
                        </InputSelect>
                    </div>
                }
                <div class="form-group">
                    <label for="formGroupDate">Date</label>
                    <InputDate @bind-Value=RefuelEntry.Date ParsingErrorMessage="Must be a date"
                               class="form-control" id="formGroupDate" placeholder="Date" />
                </div>
                <div class="form-group">
                    <label for="formGroupTotalDistance">Total Distance (km)</label>
                    <InputNumber @bind-Value=RefuelEntry.TotalDistance ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupTotalDistance" placeholder="Total Distance" min="0" />
                    <ValidationMessage For="() => RefuelEntry.TotalDistance" />
                </div>
                <div class="form-group">
                    <label for="formGroupDistance">Distance (km)</label>
                    <InputNumber @bind-Value=RefuelEntry.Distance ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupDistance" placeholder="Distance" min="0" />
                    <ValidationMessage For="() => RefuelEntry.Distance" />
                </div>
                <div class="form-group">
                    <label for="formGroupAmount">Amount (l)</label>
                    <InputNumber @bind-Value=RefuelEntry.Amount ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupAmount" placeholder="Amount" min="0" />
                    <ValidationMessage For="() => RefuelEntry.Amount" />
                </div>
                <div class="form-group">
                    <label for="formGroupCost">Cost (€)</label>
                    <InputNumber @bind-Value=RefuelEntry.Cost ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupCost" placeholder="Cost" min="0" />
                    <ValidationMessage For="() => RefuelEntry.Cost" />
                </div>
                <div class="form-group">
                    <label for="formGroupPricePerLiter">Price per Liter (€)</label>
                    <InputNumber @bind-Value=RefuelEntry.PricePerLiter ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupPricePerLiter" placeholder="Price per Liter" min="0.001" step="0.001" />
                    <ValidationMessage For="() => RefuelEntry.PricePerLiter" />
                </div>
                <div class="form-group">
                    <label for="formGroupStatus">Tank Status</label>
                    <InputSelect @bind-Value=RefuelEntry.TankStatus class="form-control" id="formGroupStatus">
                        @foreach (var tankStatus in Enum.GetValues(typeof(TankStatus)))
                        {
                            <option value="@tankStatus">@tankStatus.ToString()</option>
                        }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="formGroupNotes">Notes</label>
                    <InputTextArea @bind-Value=RefuelEntry.Notes
                                   class="form-control" id="formGroupNotes" placeholder="Notes" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        }
        else
        {
            <p>No Cars yet!</p>
        }
    </div>
</div>
@inject HttpClient HttpClient

<div class="card row">
    <div class="card-body">
        <div class="card-title">Add new Entry</div>
        <EditForm Model=@RefuelData OnValidSubmit=@FormSubmitted>
            <DataAnnotationsValidator />

            @if (LicensePlate == null)
            {
            <div class="form-group">
                <label for="formGroupCar">Car</label>
                <InputSelect @bind-Value=RefuelData.CarId class="form-control" id="formGroupCar">
                    @if (Cars != null)
                    {
                        @foreach (var car in Cars)
                        {
                            <option value="@car.Id.ToString()">@car.LicensePlate</option>
                        }
                    }
                </InputSelect>
            </div>
            }
            <div class="form-group">
                <label for="formGroupDate">Date</label>
                <InputDate @bind-Value=RefuelData.Date ParsingErrorMessage="Must be a date"
                           class="form-control" id="formGroupDate" placeholder="Date" />
            </div>
            <div class="form-group">
                <label for="formGroupDistance">Total Distance (km)</label>
                <InputNumber @bind-Value=RefuelData.TotalDistance ParsingErrorMessage="Must be a decimal value"
                             class="form-control" id="formGroupDistance" placeholder="Total Distance" min="0" />
                <ValidationMessage For="() => RefuelData.TotalDistance" />
            </div>
            <div class="form-group">
                <label for="formGroupAmount">Amount (l)</label>
                <InputNumber @bind-Value=RefuelData.Amount ParsingErrorMessage="Must be a decimal value"
                             class="form-control" id="formGroupAmount" placeholder="Amount" min="0" />
                <ValidationMessage For="() => RefuelData.Amount" />
            </div>
            <div class="form-group">
                <label for="formGroupCost">Cost (€)</label>
                <InputNumber @bind-Value=RefuelData.Cost ParsingErrorMessage="Must be a decimal value"
                             class="form-control" id="formGroupCost" placeholder="Cost" min="0" />
                <ValidationMessage For="() => RefuelData.Cost" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public string LicensePlate { get; set; }

    [CascadingParameter]
    private IEnumerable<CarDto> Cars { get; set; }

    RefuelActionFormData RefuelData { get; set; } = new RefuelActionFormData
    {
        Date = DateTime.Today
    };

    protected override void OnParametersSet()
    {
        if (LicensePlate == null) {
            RefuelData.CarId = Cars.FirstOrDefault().Id.ToString();
        }
        else
        {
            RefuelData.CarId = Cars.FirstOrDefault(c => c.LicensePlate == LicensePlate).Id.ToString();
        }
    }

    async Task FormSubmitted()
    {
        var refuelAction = new RefuelActionInfoDto
        {
            CarId = Guid.TryParse(RefuelData.CarId, out var carGuid) ? carGuid : Guid.Empty,
            Date = RefuelData.Date,
            TotalDistance = RefuelData.TotalDistance,
            Amount = RefuelData.Amount,
            Cost = RefuelData.Cost
        };
        await HttpClient.PutJsonAsync("api/refuelaction", refuelAction);
    }

    class RefuelActionFormData
    {
        private string _carId;

        [Required]
        public string CarId
        {
            get => _carId;
            set
            {
                _carId = value;
            }
        }

        [Required]
        public DateTime Date { get; set; }

        [Required(ErrorMessage = "Total Distance is required.")]
        [Range(1, double.MaxValue, ErrorMessage = "Value hast to be greater than 0.")]
        public double TotalDistance { get; set; }

        [Required(ErrorMessage = "Amount is required.")]
        [Range(1, double.MaxValue, ErrorMessage = "Value hast to be greater than 0.")]
        public double Amount { get; set; }

        [Required(ErrorMessage = "Cost is required.")]
        [Range(1, double.MaxValue, ErrorMessage = "Value hast to be greater than 0.")]
        public double Cost { get; set; }
    }
}

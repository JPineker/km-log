@inherits AddEntryBase<RefuelEntryModel>

<div class="card w-100">
    <div class="card-header">
        Add new Refuel Entry
    </div>
    <div class="card-body">
        @if (State.Cars != null && State.Cars.Any())
        {
            <EditForm Model=@Entry OnValidSubmit=@FormSubmitted>
                <FluentValidationValidator />

                @if (LicensePlate == null)
                {
                    <div class="form-group">
                        <label for="formGroupRefuelCar">Car</label>
                        <InputSelect ValueChanged="(string carId) => UpdateCarId(carId)" ValueExpression="() => Entry.CarIdAsString"
                                     Value="Entry.CarIdAsString" class="form-control" id="formGroupRefuelCar">
                            @foreach (var car in State.Cars)
                            {
                                <option value="@car.Id.ToString()">@car.LicensePlate</option>
                            }
                        </InputSelect>
                    </div>
                }
                <div class="form-group">
                    <label for="formGroupRefuelDate">Date</label>
                    <InputDate @bind-Value=Entry.Date ParsingErrorMessage="Must be a date"
                               class="form-control" id="formGroupRefuelDate" placeholder="Date" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelTotalDistance">Total Distance (km)</label>
                    <InputNumber @bind-Value=Entry.TotalDistance ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupRefuelTotalDistance" placeholder="Total Distance" min="0" />
                    <ValidationMessage For="() => Entry.TotalDistance" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelDistance">Distance (km)</label>
                    <InputNumber @bind-Value=Entry.Distance ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupRefuelDistance" placeholder="Distance" min="0" />
                    <ValidationMessage For="() => Entry.Distance" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelAmount">Amount (l)</label>
                    <InputNumber @bind-Value=Entry.Amount ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupRefuelAmount" placeholder="Amount" min="0" />
                    <ValidationMessage For="() => Entry.Amount" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelCost">Cost (€)</label>
                    <InputNumber @bind-Value=Entry.Cost ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupRefuelCost" placeholder="Cost" min="0" />
                    <ValidationMessage For="() => Entry.Cost" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelPricePerLiter">Price per Liter (€)</label>
                    <InputNumber @bind-Value=Entry.PricePerLiter ParsingErrorMessage="Must be a decimal value"
                                 class="form-control" id="formGroupRefuelPricePerLiter" placeholder="Price per Liter" min="0.001" step="0.001" />
                    <ValidationMessage For="() => Entry.PricePerLiter" />
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelStatus">Tank Status</label>
                    <InputSelect @bind-Value=Entry.TankStatus class="form-control" id="formGroupRefuelStatus">
                        @foreach (var tankStatus in Enum.GetValues(typeof(TankStatus)))
                            {
                            <option value="@tankStatus">@tankStatus.ToString()</option>
                            }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label for="formGroupRefuelNotes">Notes</label>
                    <InputTextArea @bind-Value=Entry.Notes
                                   class="form-control" id="formGroupRefuelNotes" placeholder="Notes" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        }
        else
        {
            <p>No Cars yet!</p>
        }
    </div>
</div>